package gt.edu.url.proyecto2.design;

import javax.swing.*;
import gt.edu.url.proyecto2.btree.*;
import gt.edu.url.proyecto2.dataStructures.*;
import gt.edu.url.proyecto2.graphviz.*;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.FilenameFilter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.commons.io.filefilter.FileFileFilter;

/**
 *
 * @author Laptop
 *
 */
public class Principal extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
    }
    Graphviz dg = new Graphviz();
    FileLoader Fl = new FileLoader();
    FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivos permitidos", "txt", "dot");
    JFileChooser filechoose = new JFileChooser();
    String location, storage, type;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ImportDoc_buttom = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ShowDoc_AreaText = new javax.swing.JTextArea();
        GeneratGraph_Buttom = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ImportDoc_buttom.setText("Import txt doc");
        ImportDoc_buttom.setName("ImportTxtDoc"); // NOI18N
        ImportDoc_buttom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImportDoc_buttomActionPerformed(evt);
            }
        });

        ShowDoc_AreaText.setColumns(20);
        ShowDoc_AreaText.setRows(5);
        jScrollPane1.setViewportView(ShowDoc_AreaText);

        GeneratGraph_Buttom.setText("Generate Graph");
        GeneratGraph_Buttom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GeneratGraph_ButtomActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ImportDoc_buttom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(GeneratGraph_Buttom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(ImportDoc_buttom, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(GeneratGraph_Buttom, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void ImportDoc_buttomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImportDoc_buttomActionPerformed
        filechoose.setFileFilter(filter);
        int opcion = filechoose.showOpenDialog(this);
        if (opcion == JFileChooser.APPROVE_OPTION) {
            location = filechoose.getSelectedFile().getPath();
            ShowDoc_AreaText.setText(Fl.writetext(location));
        }
    }//GEN-LAST:event_ImportDoc_buttomActionPerformed

    private void GeneratGraph_ButtomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GeneratGraph_ButtomActionPerformed
//        try {
//            filechoose.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
//
//            if (filechoose.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
//                storage = filechoose.getSelectedFile().getAbsolutePath();
//            }
//            
//            dg.createDemoFromDot(location, storage, "stack");
//        } catch (IOException e) {
//            e.printStackTrace();
//        }

        BufferedReader reader;
        try {
            reader = new BufferedReader(new FileReader(location));

            type = reader.readLine();
            String[] data = reader.readLine().split(" ");
            int[] datos = new int[data.length];

            for (int i = 0; i < datos.length; i++) {
                datos[i] = Integer.parseInt(data[i]);
            }

            switch (type) {
                case "stack":
                    //llamar un metodo para graficar
                    break;
                case "queue":
                    //llamar un metodo para graficar
                    break;
                case "linkedlist":
                    //llamar un metodo para graficar
                    break;
                case "circularlinkedlist":
                    //llamar un metodo para graficar
                    break;
                case "doublelinkedlist":
                    //llamar un metodo para graficar
                    break;
                case "btree":
                    //llamar un metodo para graficar
                    break;
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_GeneratGraph_ButtomActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton GeneratGraph_Buttom;
    private javax.swing.JButton ImportDoc_buttom;
    private javax.swing.JTextArea ShowDoc_AreaText;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
